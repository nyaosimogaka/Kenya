library(shiny)
library(shiny.fluent)
library(dplyr)

#Read data ----
df <- read.csv("/home/nyaosi/Desktop/shiny revamp/skwod/EventData.csv")

#Convert and reformat data types ----
df$Mins <- as.numeric(df$Mins)
df$Y <- 100-as.numeric(df$Y)
df$Y2 <- 100-as.numeric(df$Y2)
df$X <- as.numeric(df$X)
df$X2 <- as.numeric(df$X2)

#Player Details Table Function ----
display.details <- function(x) {
  details.table <- x %>%
    select(Tournament, Team, Player, Opponent, Category, Subcategory, Result, period, Timestamp) %>%
    mutate(
      Event = case_when(
        Category == "Pass" ~ paste(Result, Category, "(", Subcategory, ")", sep = " "),
        Category == "Shot" ~ paste(Category, Subcategory, "(", Result, ")", sep = " "),
        Category == "Block" ~ paste(Category),
        Category == "FK" ~ paste("Free Kick"),
        Subcategory == "Offside" ~ paste(Subcategory),
        Subcategory == "Kick Off" ~ paste(Subcategory),
        Subcategory == "Half Time" ~ paste(Subcategory),
        Subcategory == "Full Time" ~ paste(Subcategory),
        Subcategory == "Fouled" ~ paste(Subcategory),
        Subcategory == "Foul" ~ paste(Subcategory),
        Subcategory == "Clearance" ~ paste(Subcategory),
        Subcategory == "Carry" ~ paste(Subcategory),
        Subcategory == "Touch" ~ paste(Subcategory, "(", Result, ")"),
        Subcategory == "Sub In" ~ paste("Substitute On"),
        Subcategory == "Sub Out" ~ paste("Substitute Off"),
        Subcategory == "Interception" | Subcategory == "Tackle" ~ paste(Subcategory),
        Subcategory == "Dribble" ~ paste(Result, Subcategory),
        Category == "Duel" ~ paste(Result, " ", Subcategory, "-", Category, sep=""),
        TRUE ~ "Other Scenarios" # Default narrative for all other cases
      )
    ) %>%
    select(Tournament, Player, Team, Opponent, Event, period, Timestamp)
}

# filters <- Stack(
#   tokens = list(childrenGap = 10),
#   Stack(
#     horizontal = TRUE,
#     tokens = list(childrenGap = 10),
#     DatePicker.shinyInput("fromDate", value = as.Date('2020/01/01'), label = "From date"),
#     DatePicker.shinyInput("toDate", value = as.Date('2020/12/31'), label = "To date")
#   ),
#   Label("Filter by sales reps", className = "my_class"),
#   NormalPeoplePicker.shinyInput(
#     "selectedPeople",
#     class = "my_class",
#     options = fluentPeople,
#     pickerSuggestionsProps = list(
#       suggestionsHeaderText = 'Matching people',
#       mostRecentlyUsedHeaderText = 'Sales reps',
#       noResultsFoundText = 'No results found',
#       showRemoveButtons = TRUE
#     )
#   ),
#   Slider.shinyInput("slider",
#                     value = 0, min = 0, max = 1000000, step = 100000,
#                     label = "Minimum amount",
#                     valueFormat = JS("function(x) { return '$' + x}"),
#                     snapToStep = TRUE
#   ),
#   Toggle.shinyInput("closedOnly", value = TRUE, label = "Include closed deals only?")
# )

tournament_choices <- unique(df$Tournament)
tournament_choices <- lapply(tournament_choices, function(tournament) {
  list(key = tournament, text = tournament)
})

tarehe_choices <- unique(df$Date)
tarehe_choices <- lapply(tarehe_choices, function(tarehe) {
  list(key = tarehe, text = tarehe)
})

filters <- Stack(
  tokens = list(childrenGap = 10),
  Dropdown.shinyInput(
    inputId = "tournament",
    label = "Select Tournament",
    options = tournament_choices,
    value = tournament_choices[[1]]
  ),
  Dropdown.shinyInput(
    inputId = "matchdate",
    label = "Select Match Date",
    options = tarehe_choices
  )
  # DatePicker.shinyInput("matchDate", value = as.Date('2020/01/01'), label = "Match date"),
  # Dropdown.shinyInput("team", value = " ", options = tournament_options, label = "Select Team"),
  # Dropdown.shinyInput("player", value = " ", options = tournament_options, label = "Select Player"),
  )

# Define UI for application that draws a histogram

ui <- fluentPage(
  filters,
  uiOutput("analysis")
)

# Initialize reactiveValues outside the server function
tournaments <- reactiveValues(df = NULL)
tarehes <- reactiveValues(df = NULL)

# Define server logic required to draw a histogram
server <- function(input, output) {
  observe({
    # Reactive data frame for Tournament selection
    tournaments$df <- df[df$Tournament == input$tournament, ]
  })
  
  observe({
    # Update matchdate dropdown options based on selected tournament
    match_options <- unique(tournaments$df$Date)
    dropdown_options <- lapply(match_options, function(matchdate) {
      list(key = matchdate, text = matchdate)
    })
    
    # Pass session explicitly
    updateDropdown.shinyInput(session = getDefaultReactiveDomain(), "matchdate", choices = dropdown_options)
  })
  
  observe({
    # Reactive data frame for match selection
    tarehes$df <- df[df$Tournament == input$tournament & df$Date == input$matchdate, ]
  })
  
  output$analysis <- renderUI({
    items_list <- DetailsList(items = tarehes$df %>% display.details())
    Stack(
      tokens = list(childrenGap = 5),
      Text(variant = "large", "Event Details", block = TRUE),
      div(style = "max-height: 500px; overflow: auto", items_list)
    )
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)
